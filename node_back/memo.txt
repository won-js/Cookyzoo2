express-generator로 생성,
express : 4.16.1


npm i express-generator -g(express-generator 는 콘솔 명령어이므로(express '프로젝트명') 전역 설치가 필요.)

express 프로젝트명 --view=pug --css sass
* 템플릿엔진: PUG, 템플릿엔진이란? https://show-me-the-money.tistory.com/56
추가링크 : https://hungc.tistory.com/90

cd 프로젝트명 && npm i(설치 오류날 때도 있음, 재실행)

만약 cd로 경로만 이동하고 바로 npm start를 할 경우, ex-generator가 package.json에 넣어준 의존성 모듈이 설치가 되어있지 않아 에러가 발생함. npm i 후 실행.

npm start

error : ENOENT: no such file or directory, scandir 'C:\Users\jungh\Desktop\project-test\realtest\node_modules\node-sass\vendor'
-> npm rebuild node-sass

npm start

localhost:3000

프로젝트 폴더 구조

express : 4.16.1

bin/www : Http모듈에 express모듈을 연결하며, port를 지정할 수 있음, 서버를 실행하는 script.

public/ : 각종 리소스들을 모아놓은 폴더, 외부(browser 등의 client)에서 접근 가능한 파일들을 모은 디렉토리
images,js,stylesheets 파일들이 들어있음.

routes/ : (서버의 로직을 작성하는 곳, controller와 비슷)라우터들을 관리하는 곳,
					index.js를 기반으로 라우팅 관리를 해주면 됨.
					routes 디렉토리 안에 또 폴더를 만들어 관리해도 되고, 단지 index.js가 루트가 되게만 설정하면 됨.

DB는 추후 models 폴더를 만들어 관리					

views/: view파일(템플릿 파일)들을 관리하는 곳, 화면 부분 작성하는 곳.

		app.js : 핵심적인 서버의 역할, 미들웨어 관리를 하는 곳.				
		...
		var app = express();  // --- 1 express 패키지 호출, app 변수 객체 대입
		...
		app.set('view engine', 'pug');  // --- 2 익스프레스 앱 설정.
		...
		app.use(logger('dev')); // --- 3 미들웨어를 연결하는 부분(미들웨어는 반드시 next()를 호출해야 다음 미들웨어로 넘어감.)
		...
		module.exports = app; // --- 4 app 객체를 모듈로 만듦.

		참조링크 : https://velog.io/@new_wisdom/Node.js-6-Express-Express-generator%EB%A1%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0

package.json : vue project와 동일.

2021-02-18 재식

1. log를 morgan 과 winston으로 구분함
	- morgan : http request 요청을 로그 찍어줌 ex) get, post 메세지, url 등
	
	- winston : console.log와 같은 역할 (콘솔에 로그가 찍힘과 동시에 logs 폴더에 로그 파일이 남음)
		사용법 -> 1. import
					import {logger} from "./config/winston";
				 
				 2. logger 사용
				 	logger.info("로그내용");
					 
					로그 레벨 = const levels = { 
									error: 0,
									warn: 1,
									info: 2,
									http: 3,
									verbose: 4,
									debug: 5,
									silly: 6
								};
					이 중에 역할에 맞게 사용

2. babel 사용
	- es6 문법 사용 가능하게 함

	- es6 대표 문법 

		1. require 대신 import 사용
			module.exports 대신 export {a, b};나 export default a; 사용

		2. => 함수 가능

		3. 템플릿 리터럴 
			ex) "저의 이름은 "  + name +  "이고, 나이는 " + age + "살 입니다."
				=> `저의 이름은 ${name}이고, 나이는 ${age}살 입니다.`

	- require와 module.exports를 전부 es6 문법으로 바꿈

3. xss-clean, helmet, csurf 사용
	1. xss-clean
		- xss 공격을 막아준다고 함, 잘 모름
	  	보안 관련이라는데 안 할 이유는 없는 것 같다.
	
	2. helmet
		- 이건 header 쪽 보안이라는데 마찬가지로 안 할 이유가 없다.

	모두 app.js에 app.use로 선언해주면 간단하게 사용 가능

4. cors 설정
	- npm 으로 cors 설치 후 app.js에 app.use로 사용

5. compression 사용
	- http response를 압축해 보내줌 -> 성능 향상 (express 공홈의 미들웨어)

6. nodemon 설치
	- dev에서 사용 중 npm run start 실행하면 자동 실행됨

7. lint script 만듬
	- npm run lint 치면 코드 fix 됨

8. router 정리
	- 모델 별로 정리

9. model 확인 pug 정리, 추가
